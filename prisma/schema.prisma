// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement()) @map("_id")
  email        String        @unique
  name         String
  password     String
  image        String[]
  exerciseLogs ExerciseLog[]
  createAt     DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  workoutLog   WorkoutLog[]
}

model Workout {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  name       String
  exercises  Exercise[]
  workoutLog WorkoutLog[]
}

model Exercise {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  name          String
  times         Int
  iconPath      String        @map("icon_path")
  workouts      Workout[]
  exerciseLogs  ExerciseLog[]
  exerciseLogId Int?

  @@map("exercise")
}

model ExerciseLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  isCompleted  Boolean        @default(false) @map("is_completed")
  times        ExerciseTime[]
  exercise     Exercise?      @relation(fields: [exerciseId], references: [id])
  exerciseId   Int?           @map("exercise_id")
  user         User?          @relation(fields: [userId], references: [id])
  userId       Int?           @map("user_id")
  workoutLog   WorkoutLog?    @relation(fields: [workoutLogId], references: [id])
  workoutLogId Int?

  @@map("Exercise_log")
}

model ExerciseTime {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updateAt    DateTime @updatedAt @map("updated_at")
  weight      Int      @default(0)
  repeat      Int
  isCompleted Boolean  @default(false) @map("is_completed")

  exerciseLog   ExerciseLog? @relation(fields: [exerciseLogId], references: [id])
  exerciseLogId Int?         @map("exercise_log_id")

  @@map("Exercise_time")
}

model WorkoutLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean @default(false) @map("is_completed")

  exerciseLogs ExerciseLog[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  workout   Workout? @relation(fields: [workoutId], references: [id])
  workoutId Int?     @map("workout_id")

  @@map("Workout_log")
}
